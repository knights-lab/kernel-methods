[1] "positive classes: "
[1] "female"
[1] "negative classes:"
[1] "male"
[1] "map size before filtering:"
[1] 531  63
[1] "filter function: "
[1] "function(m){as.numeric(as.character(m))>3}"
[1] "map size after user filter:"
[1] 387  63
[1] "map size after class filter:"
[1] 335  63
[1] "female" "male"  
[[1]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[2]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[3]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[4]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[5]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[6]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[7]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[8]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[9]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[10]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[11]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[12]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[13]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[14]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[15]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[16]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[17]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[18]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[19]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[20]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[21]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[22]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[23]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[24]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[25]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[26]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[27]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[28]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[29]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[30]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[31]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[32]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[33]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[34]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[35]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[36]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[37]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[38]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[39]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[40]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[41]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[42]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[43]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[44]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[45]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[46]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[47]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[48]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[49]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[50]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[51]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[52]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[53]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[54]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[55]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[56]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[57]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[58]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[59]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[60]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[61]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[62]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[63]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[64]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[65]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[66]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[67]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[68]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[69]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[70]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[71]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[72]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[73]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[74]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[75]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[76]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[77]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[78]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[79]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[80]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[81]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[82]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[83]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[84]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[85]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[86]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[87]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[88]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[89]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[90]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[91]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[92]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[93]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[94]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[95]]
[1] "e1071"     "methods"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "base"     

[[1]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[2]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[3]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[4]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[5]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[6]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[7]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[8]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[9]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[10]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[11]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[12]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[13]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[14]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[15]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[16]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[17]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[18]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[19]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[20]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[21]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[22]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[23]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[24]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[25]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[26]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[27]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[28]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[29]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[30]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[31]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[32]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[33]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[34]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[35]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[36]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[37]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[38]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[39]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[40]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[41]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[42]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[43]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[44]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[45]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[46]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[47]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[48]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[49]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[50]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[51]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[52]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[53]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[54]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[55]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[56]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[57]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[58]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[59]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[60]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[61]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[62]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[63]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[64]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[65]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[66]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[67]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[68]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[69]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[70]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[71]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[72]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[73]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[74]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[75]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[76]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[77]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[78]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[79]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[80]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[81]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[82]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[83]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[84]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[85]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[86]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[87]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[88]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[89]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[90]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[91]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[92]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[93]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[94]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[95]]
[1] "kernlab"   "e1071"     "methods"   "stats"     "graphics"  "grDevices"
[7] "utils"     "datasets"  "base"     

[[1]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[2]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[3]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[4]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[5]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[6]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[7]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[8]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[9]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[10]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[11]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[12]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[13]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[14]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[15]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[16]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[17]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[18]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[19]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[20]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[21]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[22]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[23]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[24]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[25]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[26]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[27]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[28]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[29]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[30]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[31]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[32]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[33]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[34]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[35]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[36]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[37]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[38]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[39]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[40]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[41]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[42]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[43]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[44]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[45]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[46]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[47]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[48]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[49]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[50]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[51]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[52]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[53]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[54]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[55]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[56]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[57]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[58]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[59]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[60]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[61]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[62]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[63]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[64]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[65]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[66]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[67]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[68]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[69]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[70]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[71]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[72]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[73]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[74]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[75]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[76]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[77]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[78]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[79]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[80]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[81]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[82]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[83]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[84]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[85]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[86]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[87]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[88]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[89]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[90]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[91]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[92]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[93]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[94]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[95]]
 [1] "randomForest" "kernlab"      "e1071"        "methods"      "stats"       
 [6] "graphics"     "grDevices"    "utils"        "datasets"     "base"        

[[1]]
[[1]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[1]]$visible
[1] FALSE


[[2]]
[[2]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[2]]$visible
[1] FALSE


[[3]]
[[3]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[3]]$visible
[1] FALSE


[[4]]
[[4]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[4]]$visible
[1] FALSE


[[5]]
[[5]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[5]]$visible
[1] FALSE


[[6]]
[[6]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[6]]$visible
[1] FALSE


[[7]]
[[7]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[7]]$visible
[1] FALSE


[[8]]
[[8]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[8]]$visible
[1] FALSE


[[9]]
[[9]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[9]]$visible
[1] FALSE


[[10]]
[[10]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[10]]$visible
[1] FALSE


[[11]]
[[11]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[11]]$visible
[1] FALSE


[[12]]
[[12]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[12]]$visible
[1] FALSE


[[13]]
[[13]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[13]]$visible
[1] FALSE


[[14]]
[[14]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[14]]$visible
[1] FALSE


[[15]]
[[15]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[15]]$visible
[1] FALSE


[[16]]
[[16]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[16]]$visible
[1] FALSE


[[17]]
[[17]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[17]]$visible
[1] FALSE


[[18]]
[[18]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[18]]$visible
[1] FALSE


[[19]]
[[19]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[19]]$visible
[1] FALSE


[[20]]
[[20]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[20]]$visible
[1] FALSE


[[21]]
[[21]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[21]]$visible
[1] FALSE


[[22]]
[[22]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[22]]$visible
[1] FALSE


[[23]]
[[23]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[23]]$visible
[1] FALSE


[[24]]
[[24]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[24]]$visible
[1] FALSE


[[25]]
[[25]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[25]]$visible
[1] FALSE


[[26]]
[[26]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[26]]$visible
[1] FALSE


[[27]]
[[27]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[27]]$visible
[1] FALSE


[[28]]
[[28]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[28]]$visible
[1] FALSE


[[29]]
[[29]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[29]]$visible
[1] FALSE


[[30]]
[[30]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[30]]$visible
[1] FALSE


[[31]]
[[31]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[31]]$visible
[1] FALSE


[[32]]
[[32]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[32]]$visible
[1] FALSE


[[33]]
[[33]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[33]]$visible
[1] FALSE


[[34]]
[[34]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[34]]$visible
[1] FALSE


[[35]]
[[35]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[35]]$visible
[1] FALSE


[[36]]
[[36]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[36]]$visible
[1] FALSE


[[37]]
[[37]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[37]]$visible
[1] FALSE


[[38]]
[[38]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[38]]$visible
[1] FALSE


[[39]]
[[39]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[39]]$visible
[1] FALSE


[[40]]
[[40]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[40]]$visible
[1] FALSE


[[41]]
[[41]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[41]]$visible
[1] FALSE


[[42]]
[[42]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[42]]$visible
[1] FALSE


[[43]]
[[43]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[43]]$visible
[1] FALSE


[[44]]
[[44]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[44]]$visible
[1] FALSE


[[45]]
[[45]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[45]]$visible
[1] FALSE


[[46]]
[[46]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[46]]$visible
[1] FALSE


[[47]]
[[47]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[47]]$visible
[1] FALSE


[[48]]
[[48]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[48]]$visible
[1] FALSE


[[49]]
[[49]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[49]]$visible
[1] FALSE


[[50]]
[[50]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[50]]$visible
[1] FALSE


[[51]]
[[51]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[51]]$visible
[1] FALSE


[[52]]
[[52]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[52]]$visible
[1] FALSE


[[53]]
[[53]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[53]]$visible
[1] FALSE


[[54]]
[[54]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[54]]$visible
[1] FALSE


[[55]]
[[55]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[55]]$visible
[1] FALSE


[[56]]
[[56]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[56]]$visible
[1] FALSE


[[57]]
[[57]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[57]]$visible
[1] FALSE


[[58]]
[[58]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[58]]$visible
[1] FALSE


[[59]]
[[59]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[59]]$visible
[1] FALSE


[[60]]
[[60]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[60]]$visible
[1] FALSE


[[61]]
[[61]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[61]]$visible
[1] FALSE


[[62]]
[[62]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[62]]$visible
[1] FALSE


[[63]]
[[63]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[63]]$visible
[1] FALSE


[[64]]
[[64]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[64]]$visible
[1] FALSE


[[65]]
[[65]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[65]]$visible
[1] FALSE


[[66]]
[[66]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[66]]$visible
[1] FALSE


[[67]]
[[67]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[67]]$visible
[1] FALSE


[[68]]
[[68]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[68]]$visible
[1] FALSE


[[69]]
[[69]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[69]]$visible
[1] FALSE


[[70]]
[[70]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[70]]$visible
[1] FALSE


[[71]]
[[71]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[71]]$visible
[1] FALSE


[[72]]
[[72]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[72]]$visible
[1] FALSE


[[73]]
[[73]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[73]]$visible
[1] FALSE


[[74]]
[[74]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[74]]$visible
[1] FALSE


[[75]]
[[75]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[75]]$visible
[1] FALSE


[[76]]
[[76]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[76]]$visible
[1] FALSE


[[77]]
[[77]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[77]]$visible
[1] FALSE


[[78]]
[[78]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[78]]$visible
[1] FALSE


[[79]]
[[79]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[79]]$visible
[1] FALSE


[[80]]
[[80]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[80]]$visible
[1] FALSE


[[81]]
[[81]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[81]]$visible
[1] FALSE


[[82]]
[[82]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[82]]$visible
[1] FALSE


[[83]]
[[83]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[83]]$visible
[1] FALSE


[[84]]
[[84]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[84]]$visible
[1] FALSE


[[85]]
[[85]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[85]]$visible
[1] FALSE


[[86]]
[[86]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[86]]$visible
[1] FALSE


[[87]]
[[87]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[87]]$visible
[1] FALSE


[[88]]
[[88]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[88]]$visible
[1] FALSE


[[89]]
[[89]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[89]]$visible
[1] FALSE


[[90]]
[[90]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[90]]$visible
[1] FALSE


[[91]]
[[91]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[91]]$visible
[1] FALSE


[[92]]
[[92]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[92]]$visible
[1] FALSE


[[93]]
[[93]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[93]]$visible
[1] FALSE


[[94]]
[[94]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[94]]$visible
[1] FALSE


[[95]]
[[95]]$value
function (d, y, k = 1, nfolds = 10, verbose = FALSE) 
{
    if (nfolds == -1) 
        nfolds <- length(y)
    folds <- balanced.folds(y, nfolds = nfolds)
    result <- list()
    result$y <- as.factor(y)
    result$probabilities <- matrix(0, nr = length(y), nc = length(unique(y)))
    colnames(result$probabilities) <- sort(unique(y))
    result$predicted <- result$y
    result$errs <- numeric(length(unique(folds)))
    for (fold in sort(unique(folds))) {
        if (verbose) 
            cat(sprintf("Fold %d...\n", fold))
        foldix <- folds == fold
        knn.obj <- knn.dist(d, y, train.ix = (1:length(y))[!foldix], 
            k = k)
        result$probabilities[foldix, ] <- knn.obj$probabilities
        result$predicted[foldix] <- knn.obj$yhat
        result$errs[fold] <- mean(result$predicted[foldix] != 
            result$y[foldix])
    }
    result$confusion.matrix <- t(sapply(levels(y), function(level) table(result$predicted[y == 
        level])))
    result$err <- mean(result$predicted != result$y)
    return(result)
}

[[95]]$visible
[1] FALSE


[[1]]
[[1]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[1]]$visible
[1] FALSE


[[2]]
[[2]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[2]]$visible
[1] FALSE


[[3]]
[[3]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[3]]$visible
[1] FALSE


[[4]]
[[4]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[4]]$visible
[1] FALSE


[[5]]
[[5]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[5]]$visible
[1] FALSE


[[6]]
[[6]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[6]]$visible
[1] FALSE


[[7]]
[[7]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[7]]$visible
[1] FALSE


[[8]]
[[8]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[8]]$visible
[1] FALSE


[[9]]
[[9]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[9]]$visible
[1] FALSE


[[10]]
[[10]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[10]]$visible
[1] FALSE


[[11]]
[[11]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[11]]$visible
[1] FALSE


[[12]]
[[12]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[12]]$visible
[1] FALSE


[[13]]
[[13]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[13]]$visible
[1] FALSE


[[14]]
[[14]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[14]]$visible
[1] FALSE


[[15]]
[[15]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[15]]$visible
[1] FALSE


[[16]]
[[16]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[16]]$visible
[1] FALSE


[[17]]
[[17]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[17]]$visible
[1] FALSE


[[18]]
[[18]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[18]]$visible
[1] FALSE


[[19]]
[[19]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[19]]$visible
[1] FALSE


[[20]]
[[20]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[20]]$visible
[1] FALSE


[[21]]
[[21]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[21]]$visible
[1] FALSE


[[22]]
[[22]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[22]]$visible
[1] FALSE


[[23]]
[[23]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[23]]$visible
[1] FALSE


[[24]]
[[24]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[24]]$visible
[1] FALSE


[[25]]
[[25]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[25]]$visible
[1] FALSE


[[26]]
[[26]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[26]]$visible
[1] FALSE


[[27]]
[[27]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[27]]$visible
[1] FALSE


[[28]]
[[28]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[28]]$visible
[1] FALSE


[[29]]
[[29]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[29]]$visible
[1] FALSE


[[30]]
[[30]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[30]]$visible
[1] FALSE


[[31]]
[[31]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[31]]$visible
[1] FALSE


[[32]]
[[32]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[32]]$visible
[1] FALSE


[[33]]
[[33]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[33]]$visible
[1] FALSE


[[34]]
[[34]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[34]]$visible
[1] FALSE


[[35]]
[[35]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[35]]$visible
[1] FALSE


[[36]]
[[36]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[36]]$visible
[1] FALSE


[[37]]
[[37]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[37]]$visible
[1] FALSE


[[38]]
[[38]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[38]]$visible
[1] FALSE


[[39]]
[[39]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[39]]$visible
[1] FALSE


[[40]]
[[40]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[40]]$visible
[1] FALSE


[[41]]
[[41]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[41]]$visible
[1] FALSE


[[42]]
[[42]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[42]]$visible
[1] FALSE


[[43]]
[[43]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[43]]$visible
[1] FALSE


[[44]]
[[44]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[44]]$visible
[1] FALSE


[[45]]
[[45]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[45]]$visible
[1] FALSE


[[46]]
[[46]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[46]]$visible
[1] FALSE


[[47]]
[[47]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[47]]$visible
[1] FALSE


[[48]]
[[48]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[48]]$visible
[1] FALSE


[[49]]
[[49]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[49]]$visible
[1] FALSE


[[50]]
[[50]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[50]]$visible
[1] FALSE


[[51]]
[[51]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[51]]$visible
[1] FALSE


[[52]]
[[52]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[52]]$visible
[1] FALSE


[[53]]
[[53]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[53]]$visible
[1] FALSE


[[54]]
[[54]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[54]]$visible
[1] FALSE


[[55]]
[[55]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[55]]$visible
[1] FALSE


[[56]]
[[56]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[56]]$visible
[1] FALSE


[[57]]
[[57]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[57]]$visible
[1] FALSE


[[58]]
[[58]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[58]]$visible
[1] FALSE


[[59]]
[[59]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[59]]$visible
[1] FALSE


[[60]]
[[60]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[60]]$visible
[1] FALSE


[[61]]
[[61]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[61]]$visible
[1] FALSE


[[62]]
[[62]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[62]]$visible
[1] FALSE


[[63]]
[[63]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[63]]$visible
[1] FALSE


[[64]]
[[64]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[64]]$visible
[1] FALSE


[[65]]
[[65]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[65]]$visible
[1] FALSE


[[66]]
[[66]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[66]]$visible
[1] FALSE


[[67]]
[[67]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[67]]$visible
[1] FALSE


[[68]]
[[68]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[68]]$visible
[1] FALSE


[[69]]
[[69]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[69]]$visible
[1] FALSE


[[70]]
[[70]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[70]]$visible
[1] FALSE


[[71]]
[[71]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[71]]$visible
[1] FALSE


[[72]]
[[72]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[72]]$visible
[1] FALSE


[[73]]
[[73]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[73]]$visible
[1] FALSE


[[74]]
[[74]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[74]]$visible
[1] FALSE


[[75]]
[[75]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[75]]$visible
[1] FALSE


[[76]]
[[76]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[76]]$visible
[1] FALSE


[[77]]
[[77]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[77]]$visible
[1] FALSE


[[78]]
[[78]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[78]]$visible
[1] FALSE


[[79]]
[[79]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[79]]$visible
[1] FALSE


[[80]]
[[80]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[80]]$visible
[1] FALSE


[[81]]
[[81]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[81]]$visible
[1] FALSE


[[82]]
[[82]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[82]]$visible
[1] FALSE


[[83]]
[[83]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[83]]$visible
[1] FALSE


[[84]]
[[84]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[84]]$visible
[1] FALSE


[[85]]
[[85]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[85]]$visible
[1] FALSE


[[86]]
[[86]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[86]]$visible
[1] FALSE


[[87]]
[[87]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[87]]$visible
[1] FALSE


[[88]]
[[88]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[88]]$visible
[1] FALSE


[[89]]
[[89]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[89]]$visible
[1] FALSE


[[90]]
[[90]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[90]]$visible
[1] FALSE


[[91]]
[[91]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[91]]$visible
[1] FALSE


[[92]]
[[92]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[92]]$visible
[1] FALSE


[[93]]
[[93]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[93]]$visible
[1] FALSE


[[94]]
[[94]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[94]]$visible
[1] FALSE


[[95]]
[[95]]$value
function (model, x, ...) 
{
    rest.of.args = list(...)
    if (model$kernel == "matrix") {
        x = as.kernelMatrix(x[, SVindex(model$svm), drop = F])
    }
    if (model$kernel == "custom") {
        x = as.kernelMatrix(model$customKernelPredict(x, model, 
            ...))
    }
    return(predict(model$svm, x))
}

[[95]]$visible
[1] FALSE


[[1]]
[[1]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[1]]$visible
[1] FALSE


[[2]]
[[2]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[2]]$visible
[1] FALSE


[[3]]
[[3]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[3]]$visible
[1] FALSE


[[4]]
[[4]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[4]]$visible
[1] FALSE


[[5]]
[[5]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[5]]$visible
[1] FALSE


[[6]]
[[6]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[6]]$visible
[1] FALSE


[[7]]
[[7]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[7]]$visible
[1] FALSE


[[8]]
[[8]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[8]]$visible
[1] FALSE


[[9]]
[[9]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[9]]$visible
[1] FALSE


[[10]]
[[10]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[10]]$visible
[1] FALSE


[[11]]
[[11]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[11]]$visible
[1] FALSE


[[12]]
[[12]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[12]]$visible
[1] FALSE


[[13]]
[[13]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[13]]$visible
[1] FALSE


[[14]]
[[14]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[14]]$visible
[1] FALSE


[[15]]
[[15]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[15]]$visible
[1] FALSE


[[16]]
[[16]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[16]]$visible
[1] FALSE


[[17]]
[[17]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[17]]$visible
[1] FALSE


[[18]]
[[18]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[18]]$visible
[1] FALSE


[[19]]
[[19]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[19]]$visible
[1] FALSE


[[20]]
[[20]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[20]]$visible
[1] FALSE


[[21]]
[[21]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[21]]$visible
[1] FALSE


[[22]]
[[22]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[22]]$visible
[1] FALSE


[[23]]
[[23]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[23]]$visible
[1] FALSE


[[24]]
[[24]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[24]]$visible
[1] FALSE


[[25]]
[[25]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[25]]$visible
[1] FALSE


[[26]]
[[26]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[26]]$visible
[1] FALSE


[[27]]
[[27]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[27]]$visible
[1] FALSE


[[28]]
[[28]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[28]]$visible
[1] FALSE


[[29]]
[[29]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[29]]$visible
[1] FALSE


[[30]]
[[30]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[30]]$visible
[1] FALSE


[[31]]
[[31]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[31]]$visible
[1] FALSE


[[32]]
[[32]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[32]]$visible
[1] FALSE


[[33]]
[[33]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[33]]$visible
[1] FALSE


[[34]]
[[34]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[34]]$visible
[1] FALSE


[[35]]
[[35]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[35]]$visible
[1] FALSE


[[36]]
[[36]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[36]]$visible
[1] FALSE


[[37]]
[[37]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[37]]$visible
[1] FALSE


[[38]]
[[38]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[38]]$visible
[1] FALSE


[[39]]
[[39]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[39]]$visible
[1] FALSE


[[40]]
[[40]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[40]]$visible
[1] FALSE


[[41]]
[[41]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[41]]$visible
[1] FALSE


[[42]]
[[42]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[42]]$visible
[1] FALSE


[[43]]
[[43]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[43]]$visible
[1] FALSE


[[44]]
[[44]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[44]]$visible
[1] FALSE


[[45]]
[[45]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[45]]$visible
[1] FALSE


[[46]]
[[46]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[46]]$visible
[1] FALSE


[[47]]
[[47]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[47]]$visible
[1] FALSE


[[48]]
[[48]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[48]]$visible
[1] FALSE


[[49]]
[[49]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[49]]$visible
[1] FALSE


[[50]]
[[50]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[50]]$visible
[1] FALSE


[[51]]
[[51]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[51]]$visible
[1] FALSE


[[52]]
[[52]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[52]]$visible
[1] FALSE


[[53]]
[[53]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[53]]$visible
[1] FALSE


[[54]]
[[54]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[54]]$visible
[1] FALSE


[[55]]
[[55]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[55]]$visible
[1] FALSE


[[56]]
[[56]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[56]]$visible
[1] FALSE


[[57]]
[[57]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[57]]$visible
[1] FALSE


[[58]]
[[58]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[58]]$visible
[1] FALSE


[[59]]
[[59]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[59]]$visible
[1] FALSE


[[60]]
[[60]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[60]]$visible
[1] FALSE


[[61]]
[[61]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[61]]$visible
[1] FALSE


[[62]]
[[62]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[62]]$visible
[1] FALSE


[[63]]
[[63]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[63]]$visible
[1] FALSE


[[64]]
[[64]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[64]]$visible
[1] FALSE


[[65]]
[[65]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[65]]$visible
[1] FALSE


[[66]]
[[66]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[66]]$visible
[1] FALSE


[[67]]
[[67]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[67]]$visible
[1] FALSE


[[68]]
[[68]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[68]]$visible
[1] FALSE


[[69]]
[[69]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[69]]$visible
[1] FALSE


[[70]]
[[70]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[70]]$visible
[1] FALSE


[[71]]
[[71]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[71]]$visible
[1] FALSE


[[72]]
[[72]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[72]]$visible
[1] FALSE


[[73]]
[[73]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[73]]$visible
[1] FALSE


[[74]]
[[74]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[74]]$visible
[1] FALSE


[[75]]
[[75]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[75]]$visible
[1] FALSE


[[76]]
[[76]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[76]]$visible
[1] FALSE


[[77]]
[[77]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[77]]$visible
[1] FALSE


[[78]]
[[78]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[78]]$visible
[1] FALSE


[[79]]
[[79]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[79]]$visible
[1] FALSE


[[80]]
[[80]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[80]]$visible
[1] FALSE


[[81]]
[[81]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[81]]$visible
[1] FALSE


[[82]]
[[82]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[82]]$visible
[1] FALSE


[[83]]
[[83]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[83]]$visible
[1] FALSE


[[84]]
[[84]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[84]]$visible
[1] FALSE


[[85]]
[[85]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[85]]$visible
[1] FALSE


[[86]]
[[86]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[86]]$visible
[1] FALSE


[[87]]
[[87]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[87]]$visible
[1] FALSE


[[88]]
[[88]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[88]]$visible
[1] FALSE


[[89]]
[[89]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[89]]$visible
[1] FALSE


[[90]]
[[90]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[90]]$visible
[1] FALSE


[[91]]
[[91]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[91]]$visible
[1] FALSE


[[92]]
[[92]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[92]]$visible
[1] FALSE


[[93]]
[[93]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[93]]$visible
[1] FALSE


[[94]]
[[94]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[94]]$visible
[1] FALSE


[[95]]
[[95]]$value
function (x, y, eval.type = c("CV", "bootstrap")[1], n.folds.eval = 10, 
    error.fun = NULL, nrepeat = 1, ...) 
{
    require("e1071")
    if (n.folds.eval == -1) 
        n.folds.eval <- nrow(x)
    tunecontrol <- tune.control(cross = n.folds.eval, error.fun = error.fun, 
        nrepeat = nrepeat)
    result <- tune("train.mwas", x, y, tunecontrol = tunecontrol, 
        ...)
    return(result)
}

[[95]]$visible
[1] FALSE


[[1]]
[[1]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[1]]$visible
[1] FALSE


[[2]]
[[2]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[2]]$visible
[1] FALSE


[[3]]
[[3]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[3]]$visible
[1] FALSE


[[4]]
[[4]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[4]]$visible
[1] FALSE


[[5]]
[[5]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[5]]$visible
[1] FALSE


[[6]]
[[6]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[6]]$visible
[1] FALSE


[[7]]
[[7]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[7]]$visible
[1] FALSE


[[8]]
[[8]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[8]]$visible
[1] FALSE


[[9]]
[[9]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[9]]$visible
[1] FALSE


[[10]]
[[10]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[10]]$visible
[1] FALSE


[[11]]
[[11]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[11]]$visible
[1] FALSE


[[12]]
[[12]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[12]]$visible
[1] FALSE


[[13]]
[[13]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[13]]$visible
[1] FALSE


[[14]]
[[14]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[14]]$visible
[1] FALSE


[[15]]
[[15]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[15]]$visible
[1] FALSE


[[16]]
[[16]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[16]]$visible
[1] FALSE


[[17]]
[[17]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[17]]$visible
[1] FALSE


[[18]]
[[18]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[18]]$visible
[1] FALSE


[[19]]
[[19]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[19]]$visible
[1] FALSE


[[20]]
[[20]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[20]]$visible
[1] FALSE


[[21]]
[[21]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[21]]$visible
[1] FALSE


[[22]]
[[22]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[22]]$visible
[1] FALSE


[[23]]
[[23]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[23]]$visible
[1] FALSE


[[24]]
[[24]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[24]]$visible
[1] FALSE


[[25]]
[[25]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[25]]$visible
[1] FALSE


[[26]]
[[26]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[26]]$visible
[1] FALSE


[[27]]
[[27]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[27]]$visible
[1] FALSE


[[28]]
[[28]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[28]]$visible
[1] FALSE


[[29]]
[[29]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[29]]$visible
[1] FALSE


[[30]]
[[30]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[30]]$visible
[1] FALSE


[[31]]
[[31]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[31]]$visible
[1] FALSE


[[32]]
[[32]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[32]]$visible
[1] FALSE


[[33]]
[[33]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[33]]$visible
[1] FALSE


[[34]]
[[34]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[34]]$visible
[1] FALSE


[[35]]
[[35]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[35]]$visible
[1] FALSE


[[36]]
[[36]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[36]]$visible
[1] FALSE


[[37]]
[[37]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[37]]$visible
[1] FALSE


[[38]]
[[38]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[38]]$visible
[1] FALSE


[[39]]
[[39]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[39]]$visible
[1] FALSE


[[40]]
[[40]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[40]]$visible
[1] FALSE


[[41]]
[[41]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[41]]$visible
[1] FALSE


[[42]]
[[42]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[42]]$visible
[1] FALSE


[[43]]
[[43]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[43]]$visible
[1] FALSE


[[44]]
[[44]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[44]]$visible
[1] FALSE


[[45]]
[[45]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[45]]$visible
[1] FALSE


[[46]]
[[46]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[46]]$visible
[1] FALSE


[[47]]
[[47]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[47]]$visible
[1] FALSE


[[48]]
[[48]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[48]]$visible
[1] FALSE


[[49]]
[[49]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[49]]$visible
[1] FALSE


[[50]]
[[50]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[50]]$visible
[1] FALSE


[[51]]
[[51]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[51]]$visible
[1] FALSE


[[52]]
[[52]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[52]]$visible
[1] FALSE


[[53]]
[[53]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[53]]$visible
[1] FALSE


[[54]]
[[54]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[54]]$visible
[1] FALSE


[[55]]
[[55]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[55]]$visible
[1] FALSE


[[56]]
[[56]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[56]]$visible
[1] FALSE


[[57]]
[[57]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[57]]$visible
[1] FALSE


[[58]]
[[58]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[58]]$visible
[1] FALSE


[[59]]
[[59]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[59]]$visible
[1] FALSE


[[60]]
[[60]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[60]]$visible
[1] FALSE


[[61]]
[[61]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[61]]$visible
[1] FALSE


[[62]]
[[62]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[62]]$visible
[1] FALSE


[[63]]
[[63]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[63]]$visible
[1] FALSE


[[64]]
[[64]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[64]]$visible
[1] FALSE


[[65]]
[[65]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[65]]$visible
[1] FALSE


[[66]]
[[66]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[66]]$visible
[1] FALSE


[[67]]
[[67]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[67]]$visible
[1] FALSE


[[68]]
[[68]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[68]]$visible
[1] FALSE


[[69]]
[[69]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[69]]$visible
[1] FALSE


[[70]]
[[70]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[70]]$visible
[1] FALSE


[[71]]
[[71]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[71]]$visible
[1] FALSE


[[72]]
[[72]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[72]]$visible
[1] FALSE


[[73]]
[[73]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[73]]$visible
[1] FALSE


[[74]]
[[74]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[74]]$visible
[1] FALSE


[[75]]
[[75]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[75]]$visible
[1] FALSE


[[76]]
[[76]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[76]]$visible
[1] FALSE


[[77]]
[[77]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[77]]$visible
[1] FALSE


[[78]]
[[78]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[78]]$visible
[1] FALSE


[[79]]
[[79]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[79]]$visible
[1] FALSE


[[80]]
[[80]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[80]]$visible
[1] FALSE


[[81]]
[[81]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[81]]$visible
[1] FALSE


[[82]]
[[82]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[82]]$visible
[1] FALSE


[[83]]
[[83]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[83]]$visible
[1] FALSE


[[84]]
[[84]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[84]]$visible
[1] FALSE


[[85]]
[[85]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[85]]$visible
[1] FALSE


[[86]]
[[86]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[86]]$visible
[1] FALSE


[[87]]
[[87]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[87]]$visible
[1] FALSE


[[88]]
[[88]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[88]]$visible
[1] FALSE


[[89]]
[[89]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[89]]$visible
[1] FALSE


[[90]]
[[90]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[90]]$visible
[1] FALSE


[[91]]
[[91]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[91]]$visible
[1] FALSE


[[92]]
[[92]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[92]]$visible
[1] FALSE


[[93]]
[[93]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[93]]$visible
[1] FALSE


[[94]]
[[94]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[94]]$visible
[1] FALSE


[[95]]
[[95]]$value
function (P, D, ref.ids, new.ids) 
{
    obj.fun <- function(v, P, D, ref.ix, new.ix) {
        new.dists <- apply(P, 1, function(xx) sqrt(sum((xx - 
            v)^2)))
        sq.err <- sum((D[new.ix, ref.ix] - new.dists)^2)
        return(sq.err)
    }
    converted.set = matrix(0, 0, dim(P)[2])
    for (i in new.ids) {
        v = matrix(0, 1, dim(P)[2])[1, ]
        converted.set = rbind(converted.set, optim(v, obj.fun, 
            method = "CG", P = P, D = D, ref.ix = ref.ids, new.ix = i)$par)
    }
    rownames(converted.set) = new.ids
    return(converted.set)
}

[[95]]$visible
[1] FALSE


[[1]]
[[1]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[1]]$visible
[1] FALSE


[[2]]
[[2]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[2]]$visible
[1] FALSE


[[3]]
[[3]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[3]]$visible
[1] FALSE


[[4]]
[[4]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[4]]$visible
[1] FALSE


[[5]]
[[5]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[5]]$visible
[1] FALSE


[[6]]
[[6]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[6]]$visible
[1] FALSE


[[7]]
[[7]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[7]]$visible
[1] FALSE


[[8]]
[[8]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[8]]$visible
[1] FALSE


[[9]]
[[9]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[9]]$visible
[1] FALSE


[[10]]
[[10]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[10]]$visible
[1] FALSE


[[11]]
[[11]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[11]]$visible
[1] FALSE


[[12]]
[[12]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[12]]$visible
[1] FALSE


[[13]]
[[13]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[13]]$visible
[1] FALSE


[[14]]
[[14]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[14]]$visible
[1] FALSE


[[15]]
[[15]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[15]]$visible
[1] FALSE


[[16]]
[[16]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[16]]$visible
[1] FALSE


[[17]]
[[17]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[17]]$visible
[1] FALSE


[[18]]
[[18]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[18]]$visible
[1] FALSE


[[19]]
[[19]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[19]]$visible
[1] FALSE


[[20]]
[[20]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[20]]$visible
[1] FALSE


[[21]]
[[21]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[21]]$visible
[1] FALSE


[[22]]
[[22]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[22]]$visible
[1] FALSE


[[23]]
[[23]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[23]]$visible
[1] FALSE


[[24]]
[[24]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[24]]$visible
[1] FALSE


[[25]]
[[25]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[25]]$visible
[1] FALSE


[[26]]
[[26]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[26]]$visible
[1] FALSE


[[27]]
[[27]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[27]]$visible
[1] FALSE


[[28]]
[[28]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[28]]$visible
[1] FALSE


[[29]]
[[29]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[29]]$visible
[1] FALSE


[[30]]
[[30]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[30]]$visible
[1] FALSE


[[31]]
[[31]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[31]]$visible
[1] FALSE


[[32]]
[[32]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[32]]$visible
[1] FALSE


[[33]]
[[33]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[33]]$visible
[1] FALSE


[[34]]
[[34]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[34]]$visible
[1] FALSE


[[35]]
[[35]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[35]]$visible
[1] FALSE


[[36]]
[[36]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[36]]$visible
[1] FALSE


[[37]]
[[37]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[37]]$visible
[1] FALSE


[[38]]
[[38]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[38]]$visible
[1] FALSE


[[39]]
[[39]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[39]]$visible
[1] FALSE


[[40]]
[[40]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[40]]$visible
[1] FALSE


[[41]]
[[41]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[41]]$visible
[1] FALSE


[[42]]
[[42]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[42]]$visible
[1] FALSE


[[43]]
[[43]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[43]]$visible
[1] FALSE


[[44]]
[[44]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[44]]$visible
[1] FALSE


[[45]]
[[45]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[45]]$visible
[1] FALSE


[[46]]
[[46]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[46]]$visible
[1] FALSE


[[47]]
[[47]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[47]]$visible
[1] FALSE


[[48]]
[[48]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[48]]$visible
[1] FALSE


[[49]]
[[49]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[49]]$visible
[1] FALSE


[[50]]
[[50]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[50]]$visible
[1] FALSE


[[51]]
[[51]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[51]]$visible
[1] FALSE


[[52]]
[[52]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[52]]$visible
[1] FALSE


[[53]]
[[53]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[53]]$visible
[1] FALSE


[[54]]
[[54]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[54]]$visible
[1] FALSE


[[55]]
[[55]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[55]]$visible
[1] FALSE


[[56]]
[[56]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[56]]$visible
[1] FALSE


[[57]]
[[57]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[57]]$visible
[1] FALSE


[[58]]
[[58]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[58]]$visible
[1] FALSE


[[59]]
[[59]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[59]]$visible
[1] FALSE


[[60]]
[[60]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[60]]$visible
[1] FALSE


[[61]]
[[61]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[61]]$visible
[1] FALSE


[[62]]
[[62]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[62]]$visible
[1] FALSE


[[63]]
[[63]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[63]]$visible
[1] FALSE


[[64]]
[[64]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[64]]$visible
[1] FALSE


[[65]]
[[65]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[65]]$visible
[1] FALSE


[[66]]
[[66]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[66]]$visible
[1] FALSE


[[67]]
[[67]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[67]]$visible
[1] FALSE


[[68]]
[[68]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[68]]$visible
[1] FALSE


[[69]]
[[69]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[69]]$visible
[1] FALSE


[[70]]
[[70]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[70]]$visible
[1] FALSE


[[71]]
[[71]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[71]]$visible
[1] FALSE


[[72]]
[[72]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[72]]$visible
[1] FALSE


[[73]]
[[73]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[73]]$visible
[1] FALSE


[[74]]
[[74]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[74]]$visible
[1] FALSE


[[75]]
[[75]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[75]]$visible
[1] FALSE


[[76]]
[[76]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[76]]$visible
[1] FALSE


[[77]]
[[77]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[77]]$visible
[1] FALSE


[[78]]
[[78]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[78]]$visible
[1] FALSE


[[79]]
[[79]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[79]]$visible
[1] FALSE


[[80]]
[[80]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[80]]$visible
[1] FALSE


[[81]]
[[81]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[81]]$visible
[1] FALSE


[[82]]
[[82]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[82]]$visible
[1] FALSE


[[83]]
[[83]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[83]]$visible
[1] FALSE


[[84]]
[[84]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[84]]$visible
[1] FALSE


[[85]]
[[85]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[85]]$visible
[1] FALSE


[[86]]
[[86]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[86]]$visible
[1] FALSE


[[87]]
[[87]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[87]]$visible
[1] FALSE


[[88]]
[[88]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[88]]$visible
[1] FALSE


[[89]]
[[89]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[89]]$visible
[1] FALSE


[[90]]
[[90]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[90]]$visible
[1] FALSE


[[91]]
[[91]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[91]]$visible
[1] FALSE


[[92]]
[[92]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[92]]$visible
[1] FALSE


[[93]]
[[93]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[93]]$visible
[1] FALSE


[[94]]
[[94]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[94]]$visible
[1] FALSE


[[95]]
[[95]]$value
function (x, y) 
{
    result = list()
    res = confusion.matrix(x, y)
    TP = res[1, 1]
    TN = res[2, 2]
    FP = res[1, 2]
    FN = res[2, 1]
    result$TP = TP
    result$TN = FN
    result$FP = FP
    result$FN = FN
    precision = TP/(TP + FP)
    result$precision = precision
    recall = TP/(TP + FN)
    result$recall = recall
    result$f1 = 2 * precision * recall/(precision + recall)
    result$mcc = (TP * TN - FP * FN)/sqrt((TP + FP) * (TP + FN) * 
        (TN + FP) * (TN + FN))
    c.acc.pos = 0
    c.acc.neg = 0
    if ((TP + FN) > 0) {
        c.acc.pos = TP/(TP + FN)
    }
    if ((TN + FP) > 0) {
        c.acc.neg = TN/(TN + FP)
    }
    result$class.acc = c.acc.pos + c.acc.neg
    trapezoidal.sum = 0
    for (i in 2:length(x)) {
        trapezoidal.sum = trapezoidal.sum + (x[i] - x[i - 1]) * 
            (y[i] + y[i - 1])
    }
    gini = 1 - trapezoidal.sum
    result$auc = (gini + 1)/2
    return(result)
}

[[95]]$visible
[1] FALSE


No traceback available 
9: unserialize(node$con)
8: recvData.SOCKnode(con)
7: recvData(con)
6: FUN(X[[1L]], ...)
5: lapply(cl[1:jobs], recvResult)
4: staticClusterApply(cl, fun, length(x), argfun)
3: clusterApply(cl, x = splitList(X, length(cl)), fun = lapply, 
       fun, ...)
2: do.call(c, clusterApply(cl, x = splitList(X, length(cl)), fun = lapply, 
       fun, ...), quote = TRUE)
1: parLapply(clust, 1:nfolds, doOuterCV)
No traceback available 
4: stop("no rows to aggregate")
3: aggregate.data.frame(mf[1L], mf[-1L], FUN = FUN, ...)
2: aggregate.formula(f1 ~ method, data = fromFile, FUN = "mean")
1: aggregate(f1 ~ method, data = fromFile, FUN = "mean")
No traceback available 
No traceback available 
No traceback available 
No traceback available 
No traceback available 
No traceback available 
null device 
          1 
